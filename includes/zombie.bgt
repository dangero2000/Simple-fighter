zombie@[]zombies(0);
class zombie
{
bool fireable, moveable, steppable;
int zombsound, defsound, falsound, painsound, tilesound, wepsound;
int zombiecard;
int zombhealth;
double zombiehealth;
double zombiemaxhealth;
int zombx;
int zomby;
int dammage;
int zombietime;
int firetime;
string zombietype;
timer zombietimer, firetimer;
zombie(int zx,int zy,double hp,double maxhp,int zc,int dm,int ft,int sp,string zt,bool zombf,bool zombt,bool zombp)
{
this.zombhealth=hp;
zombx=zx;
zomby=zy;
zombiehealth=hp;
zombiemaxhealth=maxhp;
zombiecard=zc;
dammage=dm;
firetime=ft;
zombietime=sp;
zombietype=zt;
fireable=zombf;
moveable=zombt;
steppable=zombp;
string[] zombsfx=find_files("sounds/npc/zombies/"+zombietype+"/*taunt*");
if(zombsfx.length()!=0) zombsound=p.play_extended_2d("sounds/npc/zombies/"+zombietype+"/"+zombsfx[random(0,zombsfx.length()-1)],me.x,me.y,zombx,zomby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void zombloop()
{
for(uint i=0; i<zombies.length(); i++)
{
if(zombies[i].zombietimer.elapsed>=zombies[i].zombietime)
{
string[] tilers=find_files("sounds/objects/platforms/"+platile+"/*step*");
if(zombies[i].steppable==true and paused==0) tilesound=p.play_extended_2d("sounds/objects/platforms/"+platile+"/"+tilers[random(0,tilers.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
p.update_sound_2d(zombies[i].zombsound,zombies[i].zombx,zombies[i].zomby);
zombies[i].zombietimer.restart();
if(zombies[i].zombx<me.x and zombies[i].moveable==true and paused==0)
{
zombies[i].zombx++;
}
if(zombies[i].zombx>me.x and zombies[i].moveable==true and paused==0)
{
zombies[i].zombx--;
}
}
if(me.x==zombies[i].zombx and me.y==zombies[i].zomby and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("sounds/characters/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldsound==1) shieldslot=p.play_stationary_extended("sounds/characters/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=zombies[i].dammage*shieldmod;
zombies[i].firetimer.restart();
}
else if(me.x==zombies[i].zombx and me.y==zombies[i].zomby and zombies[i].firetimer.elapsed>=zombies[i].firetime and zombies[i].fireable==true and shieldon==0 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] hitsfx=find_files("sounds/npc/zombies/"+zombies[i].zombietype+"/*hit*");
if(hitsfx.length()!=0) zombies[i].wepsound=p.play_stationary_extended("sounds/npc/zombies/"+zombies[i].zombietype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/characters/pains/"+paintype+"/*hurt*");
if(hurtsfx.length()!=0) zombies[i].painsound=p.play_stationary_extended("sounds/characters/pains/"+paintype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
if(healthmod>=1) health-=zombies[i].dammage*healthmod;
zombies[i].firetimer.restart();
}
if(zombies[i].zombiehealth<=0)
{
if(zombies[i].zombiecard>=2 and paused==0)
{
p.play_2d("sounds/misc/deathfree.ogg", me.x, me.y, zombies[i].zombx, zombies[i].zomby, false);
zombies[i].zombiehealth=zombies[i].zombhealth;
zombies[i].zombiecard-=1;
}
else if(zombies[i].zombiecard<=1 and paused==0)
{
p.destroy_sound(zombies[i].zombsound);
string[] defsfx=find_files("sounds/npc/zombies/"+zombies[i].zombietype+"/*death*");
if(defsfx.length()!=0) zombies[i].defsound=p.play_extended_2d("sounds/npc/zombies/"+zombies[i].zombietype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,zombies[i].zombx,zombies[i].zomby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=1*xpmod;
kills+=1;
spawn_bodyfall(zombies[i].zombx, zombies[i].zomby, 1000);
zombies.remove_at(i);
return;
}
}
}
}
void spawn_zombie(int x,int y,double hp,double maxhp,int zc,int dm,int firetime,int zombietime,string zombietype,bool fireable,bool moveable,bool steppable)
{
zombie z1(x,y,hp,maxhp,zc,dm,firetime,zombietime,zombietype,fireable,moveable,steppable);
zombies.insert_last(z1);
}
void destroy_all_zombies()
{
for(uint i=0; i<zombies.length(); i++)
{
p.destroy_sound(zombies[i].zombsound);
}
zombies.resize(0);
}
