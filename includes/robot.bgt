robot@[]robots(0);
class robot
{
bool fireable, moveable, steppable;
int robsound, defsound, painsound, tilesound, wepsound;
int robotcard;
int robhealth;
double robothealth;
double robotmaxhealth;
int robx;
int roby;
int dammage;
int robottime;
int firetime;
string robottype;
timer robottimer, firetimer;
robot(int rx,int ry,double hp,double maxhp,int rc,int dm,int ft,int sp,string rt,bool robf,bool robt,bool robp)
{
this.robhealth=hp;
robx=rx;
roby=ry;
robothealth=hp;
robotmaxhealth=maxhp;
robotcard=rc;
dammage=dm;
firetime=ft;
robottime=sp;
robottype=rt;
fireable=robf;
moveable=robt;
steppable=robp;
string[] robsfx=find_files("sounds/npc/robots/"+robottype+"/*taunt*");
if(robsfx.length()!=0) robsound=p.play_extended_2d("sounds/npc/robots/"+robottype+"/"+robsfx[random(0,robsfx.length()-1)],me.x,me.y,robx,roby,0,0,0,0,true,0,0,painvolume,painpitch,false);
}
}
void robotloop()
{
for(uint i=0; i<robots.length(); i++)
{
if(robots[i].robottimer.elapsed>=robots[i].robottime)
{
string[] robsteps=find_files("sounds/npc/robots/"+robots[i].robottype+"/*step*");
if(robots[i].steppable==true and paused==0) tilesound=p.play_extended_2d("sounds/npc/robots/"+robots[i].robottype+"/"+robsteps[random(0,robsteps.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,tilevolume,tilepitch,false);
p.update_sound_2d(robots[i].robsound,robots[i].robx,robots[i].roby);
robots[i].robottimer.restart();
if(robots[i].robx<me.x and robots[i].moveable==true and paused==0)
{
robots[i].robx++;
}
if(robots[i].robx>me.x and robots[i].moveable==true and paused==0)
{
robots[i].robx--;
}
}
if(me.x==robots[i].robx and me.y==robots[i].roby and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and shieldon==1 and shieldstrength<=maxshieldstrength and paused==0)
{
string[] arqsfx=find_files("sounds/characters/shields/"+shieldtype+"/*hit*");
if(arqsfx.length()!=0 and shieldsound==1) shieldslot=p.play_stationary_extended("sounds/characters/shields/"+shieldtype+"/"+arqsfx[random(0,arqsfx.length()-1)],false,0,0,shieldvolume,shieldpitch,false);
shieldstrength-=robots[i].dammage*shieldmod;
robots[i].firetimer.restart();
}
else if(me.x==robots[i].robx and me.y==robots[i].roby and robots[i].firetimer.elapsed>=robots[i].firetime and robots[i].fireable==true and shieldon==0 and paused==0)
{
string[] hitsfx=find_files("sounds/npc/robots/"+robots[i].robottype+"/*hit*");
if(hitsfx.length()!=0) robots[i].wepsound=p.play_stationary_extended("sounds/npc/robots/"+robots[i].robottype+"/"+hitsfx[random(0,hitsfx.length()-1)],false,0,0,weaponvolume,weaponpitch,false);
string[] hurtsfx=find_files("sounds/characters/pains/"+paintype+"/*hurt*");
if(hurtsfx.length()!=0) robots[i].painsound=p.play_stationary_extended("sounds/characters/pains/"+paintype+"/"+hurtsfx[random(0,hurtsfx.length()-1)],false,0,0,painvolume,painpitch,false);
if(healthmod>=1) health-=robots[i].dammage*healthmod;
robots[i].firetimer.restart();
}
if(robots[i].robothealth<=0)
{
if(robots[i].robotcard>=2 and paused==0)
{
p.play_2d("sounds/misc/deathfree.ogg", me.x, me.y, robots[i].robx, robots[i].roby, false);
robots[i].robothealth=robots[i].robhealth;
robots[i].robotcard-=1;
}
else if(robots[i].robotcard<=1 and paused==0)
{
p.destroy_sound(robots[i].robsound);
string[] defsfx=find_files("sounds/npc/robots/"+robots[i].robottype+"/*death*");
if(defsfx.length()!=0) robots[i].defsound=p.play_extended_2d("sounds/npc/robots/"+robots[i].robottype+"/"+defsfx[random(0,defsfx.length()-1)],me.x,me.y,robots[i].robx,robots[i].roby,0,0,0,0,false,0,0,painvolume,painpitch,false);
if(xpmod>=1) xp+=1*xpmod;
kills+=1;
robots.remove_at(i);
return;
}
}
}
}
void spawn_robot(int x,int y,double hp,double maxhp,int rc,int dm,int firetime,int robottime,string robottype,bool fireable,bool moveable,bool steppable)
{
robot r1(x,y,hp,maxhp,rc,dm,firetime,robottime,robottype,fireable,moveable,steppable);
robots.insert_last(r1);
}
void destroy_all_robots()
{
for(uint i=0; i<robots.length(); i++)
{
p.destroy_sound(robots[i].robsound);
}
robots.resize(0);
}
