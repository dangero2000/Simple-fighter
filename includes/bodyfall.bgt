bodyfall@[]bodyfalls(0);
class bodyfall
{
int fallsound;
int fallx;
int fally;
int falltime;
timer falltimer;
bodyfall(int bx,int by,int bt)
{
fallx=bx;
fally=by;
falltime=bt;
}
}
void bfloop()
{
for(uint i=0; i<bodyfalls.length(); i++)
{
if(bodyfalls[i].falltimer.elapsed>=bodyfalls[i].falltime)
{
bodyfalls[i].falltimer.restart();
if(tilename!="hardland")
{
string [] tilers=find_files("sounds/objects/platforms/"+platile+"/*hardland*");
if(tilers.length()!=0) tilename=tilers[random(0,tilers.length()-1)];
if(tilers.length()!=0) bodyfalls[i].fallsound=p.play_extended_2d("sounds/objects/platforms/"+platile+"/"+tilename,me.x,me.y,bodyfalls[i].fallx,bodyfalls[i].fally,0,0,0,0,false,0,0,fallvolume,fallpitch,false);
bodyfalls.remove_at(i);
return;
}
}
}
}
void spawn_bodyfall(int x,int y,int falltime)
{
bodyfall b1(x,y,falltime);
bodyfalls.insert_last(b1);
}
void destroy_all_bodyfalls()
{
for(uint i=0; i<bodyfalls.length(); i++)
{
p.destroy_sound(bodyfalls[i].fallsound);
}
bodyfalls.resize(0);
}
